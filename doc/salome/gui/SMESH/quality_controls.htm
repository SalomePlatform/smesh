<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<head>
<title>Quality Controls</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com"><style type="text/css">
<!--
p.whs1 { margin-top:0pt; margin-bottom:0pt; font-weight:bold; color:#ff0000; }
p.whs2 { margin-top:0pt; margin-bottom:0pt; }
p.whs3 { margin-top:0pt; margin-bottom:0pt; font-family:'Lucida Console' , monospace; }
p.whs4 { margin-top:0pt; margin-bottom:0pt; font-family:'Times New Roman' , serif; }
-->
</style><script type="text/javascript" language="JavaScript">
<!--
if ((navigator.appName == "Netscape") && (parseInt(navigator.appVersion) == 4))
{
  var strNSS = "<style type='text/css'>";
  strNSS += "p.whs1 {margin-top:1pt;margin-bottom:1pt; }";
  strNSS += "p.whs2 {margin-top:1pt;margin-bottom:1pt; }";
  strNSS += "p.whs3 {margin-top:1pt;margin-bottom:1pt; }";
  strNSS += "p.whs4 {margin-top:1pt;margin-bottom:1pt; }";
  strNSS +="</style>";
  document.write(strNSS);
}
//-->
</script>
<script type="text/javascript" language="JavaScript" title="WebHelpInlineScript">
<!--
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//-->
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute; left:0px; top:0px; z-index:4; visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style><script type="text/javascript" language="javascript1.2" src="whmsg.js"></script>
<script type="text/javascript" language="javascript" src="whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="whtopic.js"></script>
<script type="text/javascript" language="javascript1.2">
<!--
if (window.gbWhTopic)
{
	if (window.setRelStartPage)
	{
	addTocInfo("MESH module\nTUI Scripts\nQuality Controls");
addButton("show",BTN_IMG,"Show","","","","",0,0,"whd_show0.gif","whd_show2.gif","whd_show1.gif");
addButton("hide",BTN_IMG,"Hide","","","","",0,0,"whd_hide0.gif","whd_hide2.gif","whd_hide1.gif");

	}


	if (window.setRelStartPage)
	{
	setRelStartPage("index.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}

}
else
	if (window.gbIE4)
		document.location.reload();
//-->
</script>
</head>
<body><script type="text/javascript" language="javascript1.2">
<!--
if (window.writeIntopicBar)
	writeIntopicBar(4);
//-->
</script>
<h1>Quality Controls</h1>

<h3><a name=bookmark>Free Borders</a></h3>

<p class="whs1"># Attention! This script has been written 
 using the old approach basing on direct usage of SMESH idl interface.</p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check free borders. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs2">&nbsp;</p>

<p class="whs3">import salome</p>

<p class="whs3">import geompy</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import smesh</p>

<p class="whs3">import SMESH</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># create open shell: a 
 box without one plane</p>

<p class="whs3">box = geompy.MakeBox(0., 
 0., 0., 20., 20., 15.)</p>

<p class="whs3">FaceList = geompy.SubShapeAll(box, 
 geompy.ShapeType[&quot;FACE&quot;])</p>

<p class="whs3">FaceList.remove(FaceList[5])</p>

<p class="whs3">box = geompy.MakeShell(FaceList)</p>

<p class="whs3">idbox = geompy.addToStudy(box, 
 &quot;box&quot;)</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># create a mesh</p>

<p class="whs3">tria = smesh.Mesh(box, 
 &quot;Mesh_free_borders&quot;)</p>

<p class="whs3">algo = tria.Segment()</p>

<p class="whs3">algo.NumberOfSegments(5)</p>

<p class="whs3">algo = tria.Triangle()</p>

<p class="whs3">algo.MaxElementArea(20.)</p>

<p class="whs3">tria.Compute()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">mesh = tria.GetMesh()</p>

<p class="whs3">gen = smesh.smesh</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># criterion : free borders</p>

<p class="whs3">aFilterMgr = gen.CreateFilterManager()</p>

<p class="whs3">aPredicate = aFilterMgr.CreateFreeBorders()</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Free borders Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.EDGE, 
 &quot;Free borders&quot;)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs2"><span style="font-family: 'Lucida Console', monospace;">salome.sg.updateObjBrowser(1)</span> 
 </p>

<h3><a name=bookmark1>Borders at Multiconnection</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B># 
 Attention! This script has been written using the old approach basing 
 on direct usage of SMESH idl interface.</B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check borders at multiconnection. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import salome</p>

<p class="whs3">import geompy</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import smesh</p>

<p class="whs3">import SMESH</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create open shell: 
 a box without one plane</p>

<p class="whs3">box = geompy.MakeBox(0., 
 0., 0., 20., 20., 15.)</p>

<p class="whs3">FaceList = geompy.SubShapeAll(box, 
 geompy.ShapeType[&quot;FACE&quot;])</p>

<p class="whs3">FaceList.remove(FaceList[5])</p>

<p class="whs3">box = geompy.MakeShell(FaceList)</p>

<p class="whs3">idbox = geompy.addToStudy(box, 
 &quot;box&quot;)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a mesh</p>

<p class="whs3">tria = smesh.Mesh(box, 
 &quot;Mesh_borders_at_multi-connections&quot;)</p>

<p class="whs3">algo = tria.Segment()</p>

<p class="whs3">algo.NumberOfSegments(5)</p>

<p class="whs3">algo = tria.Triangle()</p>

<p class="whs3">algo.MaxElementArea(20.)</p>

<p class="whs3">tria.Compute()</p>

<p class="whs3">mesh = tria.GetMesh()</p>

<p class="whs3">gen = smesh.smesh</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : Borders 
 at multi-connection</p>

<p class="whs3">nb_conn = 2</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = gen.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateMultiConnection()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateEqualTo()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(nb_conn)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Borders at multi-connections Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.EDGE, 
 &quot;Borders at multi-connections&quot;)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<h3><a name=bookmark2>Length 1D</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B># 
 Attention! This script has been written using the old approach basing 
 on direct usage of SMESH idl interface.</B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check length 1D. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs2">&nbsp;</p>

<p class="whs3">import salome</p>

<p class="whs3">import geompy</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import smesh</p>

<p class="whs3">import SMESH</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># create open shell: a 
 box without one plane</p>

<p class="whs3">box = geompy.MakeBox(0., 
 0., 0., 20., 20., 15.)</p>

<p class="whs3">FaceList = geompy.SubShapeAll(box, 
 geompy.ShapeType[&quot;FACE&quot;])</p>

<p class="whs3">FaceList.remove(FaceList[5])</p>

<p class="whs3">box = geompy.MakeShell(FaceList)</p>

<p class="whs3">idbox = geompy.addToStudy(box, 
 &quot;box&quot;)</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># create a mesh</p>

<p class="whs3">tria = smesh.Mesh(box, 
 &quot;Mesh_Length_1D&quot;)</p>

<p class="whs3">algo = tria.Segment()</p>

<p class="whs3">algo.NumberOfSegments(5)</p>

<p class="whs3">algo = tria.Triangle()</p>

<p class="whs3">algo.MaxElementArea(20.)</p>

<p class="whs3">tria.Compute()</p>

<p class="whs3">mesh = tria.GetMesh()</p>

<p class="whs3">gen = smesh.smesh</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># Criterion : Length &gt; 
 3.</p>

<p class="whs3">length_margin = 
 3.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = gen.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateLength()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(length_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Edges length &gt; &quot;, length_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.EDGE, 
 &quot;Edges with length &gt; &quot; + `length_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs2"><span style="font-family: 'Lucida Console', monospace;">salome.sg.updateObjBrowser(1)</span> 
 </p>

<h3><a name=bookmark3>Free Edges</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B># 
 Attention! This script has been written using the old approach basing 
 on direct usage of SMESH idl interface.</B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check free edges. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic.mesh</p>

<p class="whs3">salome = SMESH_mechanic.salome</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Remove some elements 
 to obtain free edges</p>

<p class="whs4"># Criterion : AREA 
 &gt; 95.</p>

<p class="whs3">area_margin = 95.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFunctor = aFilterMgr.CreateArea()</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(area_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">anEditor = mesh.GetMeshEditor()</p>

<p class="whs3">anEditor.RemoveElements(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : Free 
 Edges</p>

<p class="whs3">aPredicate = aFilterMgr.CreateFreeEdges()</p>

<p class="whs3">aPredicate.SetMesh(mesh)</p>

<p class="whs3">aBorders = aPredicate.GetBorders()</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create groups</p>

<p class="whs3">aGroupF = mesh.CreateGroup(SMESH.FACE, 
 &quot;Faces with free edges&quot;)</p>

<p class="whs3">aGroupN = mesh.CreateGroup(SMESH.NODE, 
 &quot;Nodes on free edges&quot;)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># fill groups with 
 elements, corresponding to the criterion</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">print &quot;Criterion: 
 Free edges Nb = &quot;, len(aBorders)</p>

<p class="whs3">for i in range(len(aBorders)):</p>

<p class="whs3">&nbsp;&nbsp;aBorder 
 = aBorders[i]</p>

<p class="whs3">&nbsp;&nbsp;print 
 &quot;Face # &quot;, aBorder.myElemId, &quot; : Edge between nodes (&quot;,</p>

<p class="whs3">&nbsp;&nbsp;print 
 aBorder.myPnt1, &quot;, &quot;, aBorder.myPnt2, &quot;)&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">&nbsp;&nbsp;<span 
 style="margin-top: 0pt;
		margin-bottom: 0pt;
		font-family: 'Lucida Console', monospace;">aGroupF.Add([aBorder.myElemId])</span></p>

<p class="whs3">&nbsp;&nbsp;aGroupN.Add([aBorder.myPnt1, 
 aBorder.myPnt2])</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<p class="whs3">&nbsp;</p>

<h3><a name=bookmark4>Length 2D</a></h3>

<p class="whs1"><span><font color=red ><B><span style="font-weight: bold; color: #ff0000;"><font color=red ><B># 
 Attention! This script has been written using the old approach basing 
 on direct usage of SMESH idl interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check length 2D. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import salome</p>

<p class="whs3">import geompy</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import smesh</p>

<p class="whs3">import SMESH</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create open shell: 
 a box without one plane</p>

<p class="whs3">box = geompy.MakeBox(0., 
 0., 0., 20., 20., 15.)</p>

<p class="whs3">FaceList = geompy.SubShapeAll(box, 
 geompy.ShapeType[&quot;FACE&quot;])</p>

<p class="whs3">FaceList.remove(FaceList[5])</p>

<p class="whs3">box = geompy.MakeShell(FaceList)</p>

<p class="whs3">idbox = geompy.addToStudy(box, 
 &quot;box&quot;)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a mesh</p>

<p class="whs3">tria = smesh.Mesh(box, 
 &quot;Mesh_Length_2D&quot;)</p>

<p class="whs3">algo = tria.Segment()</p>

<p class="whs3">algo.NumberOfSegments(5)</p>

<p class="whs3">algo = tria.Triangle()</p>

<p class="whs3">algo.MaxElementArea(20.)</p>

<p class="whs3">tria.Compute()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">mesh = tria.GetMesh()</p>

<p class="whs3">gen = smesh.smesh</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : Length 
 2D &gt; 5.7</p>

<p class="whs3">length_margin = 
 5.7</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = gen.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateLength2D()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(length_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Edges length 2D &gt; &quot;, length_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.FACE, 
 &quot;Faces with length 2D &gt; &quot; + `length_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<p class="whs2">&nbsp;</p>

<h3><a name=bookmark5>Borders at Multiconnection 2D</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check borders at multiconnection 2D. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import salome</p>

<p class="whs3">import geompy</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import smesh</p>

<p class="whs3">import SMESH</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a compound 
 of two glued boxes</p>

<p class="whs3">box1 = geompy.MakeBox(0., 
 0., 0., 20., 20., 15.)</p>

<p class="whs3">box2 = geompy.MakeTranslation(box1, 
 0., 20., 0)</p>

<p class="whs3">comp = geompy.MakeCompound([box1, 
 box2])</p>

<p class="whs3">box = geompy.MakeGlueFaces(comp, 
 0.000001)</p>

<p class="whs3">idbox = geompy.addToStudy(box, 
 &quot;box&quot;)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a mesh</p>

<p class="whs3">tria = smesh.Mesh(box, 
 &quot;Box compound : 2D triangle mesh&quot;)</p>

<p class="whs3">algo = tria.Segment()</p>

<p class="whs3">algo.NumberOfSegments(5)</p>

<p class="whs3">algo = tria.Triangle()</p>

<p class="whs3">algo.MaxElementArea(20.)</p>

<p class="whs3">tria.Compute()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">mesh = tria.GetMesh()</p>

<p class="whs3">gen = smesh.smesh</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : MULTI-CONNECTION 
 2D = 3</p>

<p class="whs3">nb_conn = 3</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = gen.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateMultiConnection2D()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateEqualTo()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(nb_conn)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Borders at multi-connection 2D = &quot;, nb_conn, &quot; Nb = &quot;, 
 len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.FACE, 
 &quot;Borders at multi-connection 2D = &quot; + `nb_conn`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<p class="whs3">&nbsp;</p>

<h3><a name=bookmark6>Area</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check area. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs2">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic.mesh</p>

<p class="whs3">salome = SMESH_mechanic.salome</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># Criterion : AREA &gt; 
 100.</p>

<p class="whs3">area_margin = 100.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateArea()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(area_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Area &gt; &quot;, area_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs2"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.FACE, 
 &quot;Area &gt; &quot; + `area_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs2"><span style="font-family: 'Lucida Console', monospace;">salome.sg.updateObjBrowser(1)</span> 
 </p>

<h3><a name=bookmark7>Taper</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check taper. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic.mesh</p>

<p class="whs3">salome = SMESH_mechanic.salome</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : Taper 
 &gt; 3e-20</p>

<p class="whs3">taper_margin = 3e-20</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateTaper()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(taper_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Taper &gt; &quot;, taper_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.FACE, 
 &quot;Taper &gt; &quot; + `taper_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<h3><a name=bookmark8>Aspect Ratio</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check aspect ratio. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic.mesh</p>

<p class="whs3">salome = SMESH_mechanic.salome</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : ASPECT 
 RATIO &gt; 1.8</p>

<p class="whs3">ar_margin = 1.8</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateAspectRatio()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(ar_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Aspect Ratio &gt; &quot;, ar_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.FACE, 
 &quot;Aspect Ratio &gt; &quot; + `ar_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<p class="whs3">&nbsp;</p>

<h3><a name=bookmark9>Minimum Angle</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check minimum angle. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic.mesh</p>

<p class="whs3">salome = SMESH_mechanic.salome</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : MINIMUM 
 ANGLE &lt; 35.</p>

<p class="whs3">min_angle = 35.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateMinimumAngle()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateLessThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(min_angle)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Minimum Angle &lt; &quot;, min_angle, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.FACE, 
 &quot;Minimum Angle &lt; &quot; + `min_angle`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<p class="whs3">&nbsp;</p>

<h3><a name=bookmark10>Warping</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check warping. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic.mesh</p>

<p class="whs3">salome = SMESH_mechanic.salome</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : WARP 
 ANGLE &gt; 1e-15</p>

<p class="whs3">wa_margin = 1e-15</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateWarping()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(wa_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Warp &gt; &quot;, wa_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.FACE, 
 &quot;Warp &gt; &quot; + `wa_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<p class="whs3">&nbsp;</p>

<h3><a name=bookmark12>Skew</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check skew. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic.mesh</p>

<p class="whs3">salome = SMESH_mechanic.salome</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : Skew 
 &gt; 38.</p>

<p class="whs3">skew_margin = 38.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateSkew()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(skew_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Skew &gt; &quot;, skew_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.FACE, 
 &quot;Skew &gt; &quot; + `skew_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<p class="whs3">&nbsp;</p>

<h3><a name=bookmark11>Aspect Ratio 3D</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check aspect ratio 3D. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic_tetra</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic_tetra.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic_tetra.mesh</p>

<p class="whs3">salome = SMESH_mechanic_tetra.salome</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># Criterion : ASPECT 
 RATIO 3D &gt; 4.5</p>

<p class="whs3">ar_margin = 4.5</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateAspectRatio3D()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateMoreThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(ar_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># print the result</p>

<p class="whs3">print &quot;Criterion: 
 Aspect Ratio 3D &gt; &quot;, ar_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">&nbsp;</p>

<p class="whs4"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.VOLUME, 
 &quot;Aspect Ratio 3D &gt; &quot; + `ar_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">salome.sg.updateObjBrowser(1) 
 </p>

<h3><a name=Volume>Volume</a></h3>

<p class="whs1"><span style="font-weight: bold; color: #ff0000;"><font color=red ><B><span 
 style="font-weight: bold; color: #ff0000;"><font color=red ><B># Attention! This script has 
 been written using the old approach basing on direct usage of SMESH idl 
 interface.</B></font></span></B></font></span></p>

<p class="whs1"># For the moment smesh package doesn't provide 
 methods to check volume. </p>

<p class="whs1"># In the next SALOME version the scripts will 
 be updated to use only the commands from smesh package.</p>

<p class="whs2">&nbsp;</p>

<p class="whs3">import SMESH</p>

<p class="whs3">import SMESH_mechanic_tetra</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">smesh &nbsp;= 
 SMESH_mechanic_tetra.smesh</p>

<p class="whs3">mesh &nbsp;&nbsp;= 
 SMESH_mechanic_tetra.mesh</p>

<p class="whs3">salome = SMESH_mechanic_tetra.salome</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># Criterion : VOLUME &lt; 
 7.</p>

<p class="whs3">volume_margin = 
 7.</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilterMgr = smesh.CreateFilterManager()</p>

<p class="whs3">aFunctor = aFilterMgr.CreateVolume3D()</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aPredicate = aFilterMgr.CreateLessThan()</p>

<p class="whs3">aPredicate.SetNumFunctor(aFunctor)</p>

<p class="whs3">aPredicate.SetMargin(volume_margin)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">aFilter = aFilterMgr.CreateFilter()</p>

<p class="whs3">aFilter.SetPredicate(aPredicate)</p>

<p class="whs3">&nbsp;</p>

<p class="whs3">anIds = aFilter.GetElementsId(mesh)</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># print the result</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs3">print &quot;Criterion: 
 Volume &lt; &quot;, volume_margin, &quot; Nb = &quot;, len(anIds)</p>

<p class="whs3">j = 1</p>

<p class="whs3">for i in range(len(anIds)):</p>

<p class="whs3">&nbsp;&nbsp;if 
 j &gt; 20: j = 1; print &quot;&quot;</p>

<p class="whs3">&nbsp;&nbsp;print 
 anIds[i],</p>

<p class="whs3">&nbsp;&nbsp;j 
 = j + 1</p>

<p class="whs3">&nbsp;&nbsp;pass</p>

<p class="whs3">print &quot;&quot;</p>

<p class="whs2">&nbsp;</p>

<p class="whs2"># create a group</p>

<p class="whs3">aGroup = mesh.CreateGroup(SMESH.VOLUME, 
 &quot;Volume &lt; &quot; + `volume_margin`)</p>

<p class="whs3">aGroup.Add(anIds)</p>

<p class="whs3">&nbsp;</p>

<p class="whs2"><span style="font-family: 'Lucida Console', monospace;">salome.sg.updateObjBrowser(1)</span> 
 </p>

<script type="text/javascript" language="javascript1.2">
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);
//-->
</script>
</body>
</html>
