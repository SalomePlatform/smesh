/*!

\page basic_meshing_algos_page Basic meshing algorithms

\n The MESH module contains a set of meshing algorithms, which are
used for meshing entities (1D, 2D, 3D) composing geometrical objects.

<ul>
<li>For meshing of 1D entities (<b>edges</b>):</li>

<ul>
<li>Wire Discretization meshing algorithm - splits a wire into a
number of mesh segments following any 1D hypothesis.</li>
<li>Composite Side Discretization algorithm - allows to apply any 1D
hypothesis to a whole side of a geometrical face even if it is
composed of several edges provided that they form C1 curve, have the
same hypotheses assigned and form one side in all faces of the main
shape of a mesh.</li>
</ul>

<li>For meshing of 2D entities (<b>faces</b>):</li>

<ul>
<li>Triangle meshing algorithms (Mefisto) - Faces are split into triangular elements.</li>
<li>Quadrangle meshing algorithm (Mapping) - quadrilateral Faces are split into
quadrangular elements.</li>
</ul>

\image html image123.gif "Example of a triangular 2D mesh"

\image html image124.gif "Example of a quadrangular 2D mesh"

<li>For meshing of 3D entities (<b>solid objects</b>):</li>

<ul>
<li>Hexahedron meshing algorithm (i,j,k) - 6-sided Solids are split into
hexahedral (cubic) elements.</li>
<li>\subpage cartesian_algo_page</li>
- internal parts of Solids are split into hexahedral elements forming a
Cartesian grid; polyhedra and other types of elements are generated
where the geometrical boundary intersects Cartesian cells.</li>
</ul>

\image html image125.gif "Example of a tetrahedral 3D mesh"

\image html image126.gif "Example of a hexahedral 3D mesh"
</ul>

Some 3D meshing algorithms, such as Hexahedron(i,j,k) and some
commercial ones, also can generate 3D meshes from 2D meshes, working without
geometrical objects. 

There is also a number of more specific algorithms:
<ul>
<li>\subpage prism_3d_algo_page "for meshing prismatic shapes"</li>
<li>\subpage projection_algos_page "for meshing by projection of another mesh"</li>
<li>\subpage import_algos_page "for meshing by importing elements from another mesh"</li>
<li>\subpage radial_prism_algo_page "for meshing geometrical objects with cavities"</li>
<li>\subpage radial_quadrangle_1D2D_algo_page "for meshing special 2d faces (circles and part of circles)"</li>
<li>\subpage use_existing_page "Use Edges to be Created Manually" and 
\ref use_existing_page "Use Faces to be Created Manually" algorithms can be
used to create a 1D or a 2D mesh in a python script.</li>
<li>\subpage segments_around_vertex_algo_page "for defining the local size of elements around a certain node"</li>
</ul>

\ref constructing_meshes_page "Constructing meshes" page describes in
detail how to apply meshing algorithms.

<br><b>See Also</b> a sample TUI Script of a 
\ref tui_defining_meshing_algos "Define Meshing Algorithm" operation.  

*/
