/*!

\page tui_filters_page Filters usage

\tableofcontents

Filters allow picking only the mesh elements satisfying to a
specific condition or a set of conditions. Filters can be used to create
or edit mesh groups, remove elements from the mesh, control
mesh quality by different parameters, etc.

Several filtering criteria can be combined together by using logical
operators \a AND and \a OR. In addition, a filtering criterion can
be reverted using logical operator \a NOT.

Mesh filters can use the functionality of mesh quality controls to filter
mesh nodes / elements by a specific characteristic (Area, Length, etc).

This page provides a short description of the existing mesh filters,
describes required parameters and gives simple examples of usage in
Python scripts.

\sa \ref tui_quality_controls_page

\section filter_aspect_ratio Aspect ratio

filters 2D mesh elements (faces) according to the aspect ratio value:
- element type should be \a SMESH.FACE
- functor type should be \a SMESH.FT_AspectRatio
- threshold is floating point value (aspect ratio)

\tui_script{filters_ex01.py}

\sa \ref tui_aspect_ratio

\section filter_aspect_ratio_3d Aspect ratio 3D

filters 3D mesh elements (volumes) according to the aspect ratio value:
- element type is \a SMESH.VOLUME
- functor type is \a SMESH.FT_AspectRatio3D
- threshold is floating point value (aspect ratio)

\tui_script{filters_ex02.py}

\sa \ref tui_aspect_ratio_3d

\section filter_warping_angle Warping angle

filters 2D mesh elements (faces) according to the warping angle value:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_Warping
- threshold is floating point value (warping angle)

\tui_script{filters_ex03.py}

\sa \ref tui_warping

\section filter_minimum_angle Minimum angle

filters 2D mesh elements (faces) according to the minimum angle value:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_MinimumAngle
- threshold is floating point value (minimum angle)

\tui_script{filters_ex04.py}

\sa \ref tui_minimum_angle

\section filter_taper Taper

filters 2D mesh elements (faces) according to the taper value:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_Taper
- threshold is floating point value (taper)

\tui_script{filters_ex05.py}

\sa \ref tui_taper

\section filter_skew Skew

filters 2D mesh elements (faces) according to the skew value:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_Skew
- threshold is floating point value (skew)

\tui_script{filters_ex06.py}

\sa \ref tui_skew

\section filter_area Area

filters 2D mesh elements (faces) according to the area value:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_Area
- threshold is floating point value (area)

\tui_script{filters_ex07.py}

\sa \ref tui_area

\section filter_volume Volume

filters 3D mesh elements (volumes) according to the volume value:
- element type is \a SMESH.VOLUME
- functor type is \a SMESH.FT_Volume3D
- threshold is floating point value (volume)

\tui_script{filters_ex08.py}

\sa \ref tui_volume

\section filter_free_borders Free borders

filters 1D mesh elements (edges) which represent free borders of a mesh:
- element type is \a SMESH.EDGE
- functor type is \a SMESH.FT_FreeBorders
- threshold value is not required

\tui_script{filters_ex09.py}

\sa \ref tui_free_borders

\section filter_free_edges Free edges

filters 2D mesh elements (faces) having edges (i.e. links between
nodes, not mesh segments) belonging to one face of mesh only:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_FreeEdges
- threshold value is not required

\tui_script{filters_ex10.py}

\sa \ref tui_free_edges

\section filter_free_nodes Free nodes

filters free nodes:
- element type is \a SMESH.NODE
- functor type is \a SMESH.FT_FreeNodes
- threshold value is not required

\tui_script{filters_ex11.py}

\sa \ref tui_free_nodes

\section filter_free_faces Free faces

filters free faces:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_FreeFaces
- threshold value is not required

\tui_script{filters_ex12.py}

\sa \ref tui_free_faces

\section filter_bare_border_faces Bare border faces

filters faces with bare borders:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_BareBorderFace
- threshold value is not required

\tui_script{filters_ex13.py}

\sa \ref tui_bare_border_faces

\section filter_coplanar_faces Coplanar faces

filters coplanar faces:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_CoplanarFaces
- threshold value is the face ID
- tolerance is in degrees

\tui_script{filters_ex14.py}

\section filter_over_constrained_faces Over-constrained faces

filters over-constrained faces:
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_OverConstrainedFace
- threshold value is not required

\tui_script{filters_ex15.py}

\sa \ref tui_over_constrained_faces

\section filter_double_elements Double edges, Double faces, Double volumes

filters mesh elements basing on the same set of nodes:
- element type is either \a SMESH.EGDE, \a SMESH.FACE or \a SMESH.VOLUME
- functor type is either \a SMESH.FT_EqualEdges, \a
          SMESH.FT_EqualFaces or \a SMESH.FT_EqualVolumes,
- threshold value is not required

\tui_script{filters_ex16.py}


\section tui_double_nodes_control Double nodes

filters mesh nodes which are coincident with other nodes (within a given tolerance):
- element type is \a SMESH.NODE
- functor type is \a SMESH.FT_EqualNodes
- threshold value is not required
- default tolerance is 1.0e-7

\tui_script{filters_ex17.py}


\section filter_node_nb_conn Node connectivity number

filters nodes according to a number of elements of highest dimension connected to a node:
- element type should be \a SMESH.NODE
- functor type should be \a SMESH.FT_NodeConnectivityNumber
- threshold is an integer value (number of elements)

\tui_script{filters_node_nb_conn.py}


\section filter_borders_multiconnection Borders at multi-connection

filters 1D mesh elements (segments) according to the specified number of
connections (faces and volumes on whose border the segment lies):
- element type is \a SMESH.EDGE
- functor type is \a SMESH.FT_MultiConnection
- threshold is integer value (number of connections)

\tui_script{filters_ex18.py}

\sa \ref tui_borders_at_multiconnection

\section filter_borders_multiconnection_2d Borders at multi-connection 2D

filters 2D mesh elements (faces) with the specified maximal number of
faces connected to a border (link between nodes, not mesh segment):
- element type is \a SMESH.FACE
- functor type is \a SMESH.FT_MultiConnection2D
- threshold is integer value (number of connections)

\tui_script{filters_ex19.py}

\sa \ref tui_borders_at_multiconnection_2d

\section filter_length Length

filters 1D mesh elements (edges) according to the edge length value:
- element type should be \a SMESH.EDGE
- functor type should be \a SMESH.FT_Length
- threshold is floating point value (length)

\tui_script{filters_ex20.py}

\sa \ref tui_length_1d

\section filter_length_2d Length 2D

filters 2D mesh elements (faces) according to the maximum length of its
edges (links between nodes):
- element type should be \a SMESH.FACE
- functor type should be \a SMESH.FT_Length2D
- threshold is floating point value (edge length)

\tui_script{filters_ex21.py}

\sa \ref tui_length_2d

\section filter_max_element_length_2d Element Diameter 2D

filters 2D mesh elements (faces) according to the maximum length
of its edges and diagonals:
- element type should be \a SMESH.FACE
- functor type should be \a SMESH.FT_MaxElementLength2D
- threshold is floating point value (length)

\tui_script{filters_ex22.py}

\sa \ref tui_max_element_length_2d

\section filter_max_element_length_3d Element Diameter 3D

filters 3D mesh elements (volumes) according to the maximum length
of its edges and diagonals:
- element type should be \a SMESH.VOLUME
- functor type should be \a SMESH.FT_MaxElementLength3D
- threshold is floating point value (edge/diagonal length)

\tui_script{filters_ex23.py}

\sa \ref tui_max_element_length_3d

\section filter_bare_border_volumes Bare border volumes

filters 3D mesh elements with bare borders, i.e. having a facet not
shared with other volumes and without a face on it:
- element type is \a SMESH.VOLUME
- functor type is \a SMESH.FT_BareBorderVolume
- threshold value is not required

\tui_script{filters_ex24.py}

\sa \ref tui_bare_border_volumes

\section filter_over_constrained_volumes Over-constrained volumes

filters over-constrained volumes, whose all nodes are on the mesh boundary:
- element type is \a SMESH.VOLUME
- functor type is \a SMESH.FT_OverConstrainedVolume
- threshold value is not required

\tui_script{filters_ex25.py}

\sa \ref tui_over_constrained_faces

\section filter_belong_to_group Belong to Mesh Group

filters mesh entities (nodes or elements) included in a mesh group
defined by threshold value:
- element type can be any, from \a  SMESH.NODE to \a SMESH.BALL
- functor type should be \a SMESH.FT_BelongToMeshGroup
- threshold is mesh group object

\tui_script{filters_belong2group.py}

\section filter_belong_to_geom Belong to Geom

filters mesh entities (nodes or elements) which all nodes lie on the
shape defined by threshold value:
- element type can be any, from \a  SMESH.NODE to \a SMESH.BALL
- functor type should be \a SMESH.FT_BelongToGeom
- threshold is geometrical object
- tolerance is a distance between a node and the geometrical object;
it is used if an node is not associated to any geometry.

\tui_script{filters_ex26.py}

\section filter_lying_on_geom Lying on Geom

filters mesh entities (nodes or elements) at least one node of which lies on the
shape defined by threshold value:
- element type can be any, from \a  SMESH.NODE to \a SMESH.BALL
- functor type should be \a SMESH.FT_LyingOnGeom
- threshold is geometrical object
- tolerance is a distance between a node and the geometrical object;
it is used if an node is not associated to any geometry.

\tui_script{filters_ex27.py}

\section filter_belong_to_plane Belong to Plane

filters mesh entities (nodes or elements) which all nodes belong to the
plane defined by threshold value with the given tolerance:
- element type can be any except \a  SMESH.VOLUME
- functor type should be \a SMESH.FT_BelongToPlane
- threshold is geometrical object (plane)
- default tolerance is 1.0e-7

\tui_script{filters_ex28.py}

\section filter_belong_to_cylinder Belong to Cylinder

filters mesh entities (nodes or elements) which all nodes belong to the
cylindrical face defined by threshold value with the given tolerance:
- element type can be any except \a  SMESH.VOLUME
- functor type should be \a SMESH.FT_BelongToCylinder
- threshold is geometrical object (cylindrical face)
- default tolerance is 1.0e-7

\tui_script{filters_ex29.py}

\section filter_belong_to_surface Belong to Surface

filters mesh entities (nodes or elements) which all nodes belong to the
arbitrary surface defined by threshold value with the given tolerance:
- element type can be any except \a  SMESH.VOLUME
- functor type should be \a SMESH.FT_BelongToGenSurface
- threshold is geometrical object (arbitrary surface)
- default tolerance is 1.0e-7

\tui_script{filters_ex30.py}

\section filter_range_of_ids Range of IDs

filters mesh entities elements (nodes or elements) according to the
specified identifiers range:
- element type can be any, from \a  SMESH.NODE to \a SMESH.BALL
- functor type is \a SMESH.FT_RangeOfIds
- threshold is string listing required IDs and/or ranges of IDs, e.g."1,2,3,50-60,63,67,70-78"	

\tui_script{filters_ex31.py}

\section filter_bad_oriented_volume Badly oriented volume

filters 3D mesh elements (volumes), which are incorrectly oriented from
the point of view of MED convention. 
- element type should be \a SMESH.VOLUME
- functor type is \a SMESH.FT_BadOrientedVolume
- threshold is not required

\tui_script{filters_ex32.py}

\section filter_linear_or_quadratic Linear / quadratic

filters linear / quadratic mesh elements:
- element type should be either \a SMESH.EDGE, \a SMESH.FACE or \a SMESH.VOLUME
- functor type is \a SMESH.FT_LinearOrQuadratic
- threshold is not required
- if unary operator is set to SMESH.FT_LogicalNOT, the quadratic
elements are selected, otherwise (by default) linear elements are selected

\tui_script{filters_ex33.py}

\section filter_group_color Group color

filters mesh entities, belonging to the group with the color defined by the threshold value.
- element type can be any, from \a  SMESH.NODE to \a SMESH.BALL
- functor type is \a SMESH.FT_GroupColor
- threshold should be of SALOMEDS.Color type

\tui_script{filters_ex34.py}

\section filter_geom_type Geometry type

filters mesh elements by the geometric type defined with the threshold
value. The list of available geometric types depends on the element
entity type.
- element type can be any, e.g.: \a SMESH.EDGE, \a SMESH.FACE, \a SMESH.VOLUME, etc.
- functor type should be \a SMESH.FT_ElemGeomType
- threshold is either of smesh.GeometryType values. Type \a SMESH.GeometryType._items in the Python Console to see all geometric types.

\tui_script{filters_ex35.py}

\section filter_entity_type Entity type

filters mesh elements by the geometric type and number of nodes. 
- element type can be any, e.g.: \a SMESH.EDGE, \a SMESH.FACE, \a SMESH.VOLUME, etc.
- functor type should be \a SMESH.FT_EntityType
- threshold is either of SMESH.EntityType values. Type \a SMESH.EntityType._items in the Python Console to see all entity types.

\tui_script{filters_ex37.py}

\section filter_ball_diam Ball diameter

filters ball elements by diameter. 
- element type should be \a SMESH.BALL
- functor type should be \a SMESH.FT_BallDiameter
- threshold is floating point value (ball diameter)

\tui_script{filters_ex38.py}

\section filter_domain Elements of a domain

filters elements of a specified domain. 
- element type can be any, e.g.: \a SMESH.EDGE, \a SMESH.FACE, \a SMESH.VOLUME, etc.
- functor type should be \a SMESH.FT_ConnectedElements
- threshold is either (1) node ID or (2)  geometrical vertex or (3) 3 coordinates of a point.

\tui_script{filters_ex39.py}

\section combining_filters How to combine several criteria into a filter?

Several criteria can be combined into a filter.

Example :

\tui_script{filters_ex36.py}


*/
