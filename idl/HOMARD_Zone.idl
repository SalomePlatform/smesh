// Copyright (C) 2011-2020  CEA/DEN, EDF R&D
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

// Remarques :
// L'ordre de description des fonctions est le meme dans tous les fichiers
// HOMARD_aaaa.idl, HOMARD_aaaa.hxx, HOMARD_aaaa.cxx, HOMARD_aaaa_i.hxx, HOMARD_aaaa_i.cxx :
// 1. Les generalites : Name, Delete, DumpPython, Dump, Restore
// 2. Les caracteristiques
// 3. Le lien avec les autres structures
//
// Quand les 2 fonctions Setxxx et Getxxx sont presentes, Setxxx est decrit en premier
//

#ifndef _HOMARD_Zone_IDL
#define _HOMARD_Zone_IDL

#include "SALOME_Component.idl"
#include "SALOME_Exception.idl"
#include "SALOMEDS.idl"

module ADAPT
{
  typedef sequence<double    > double_array ;
  typedef sequence<string    > listeHypo ;

  interface HOMARD_Zone : Engines::EngineComponent
  {
// Generalites
    void     SetName(in string Name)                       raises (SALOME::SALOME_Exception);
    string   GetName()                                     raises (SALOME::SALOME_Exception);

    long     Delete()                                      raises (SALOME::SALOME_Exception);

    string   GetDumpPython()                               raises (SALOME::SALOME_Exception);

// Caracteristiques
    void     SetType (in long Type)                        raises (SALOME::SALOME_Exception);
    long     GetType()                                     raises (SALOME::SALOME_Exception);

    void     SetBox    (in double Xmini, in double Xmaxi, in double Ymini,
                        in double Ymaxi, in double Zmini, in double Zmaxi)
                                                           raises (SALOME::SALOME_Exception);
    void     SetCylinder (in double Xcentre, in double Ycentre, in double Zcentre,
                          in double Xaxis, in double Yaxis, in double Zaxis,
                          in double Rayon, in double Haut)
                                                           raises (SALOME::SALOME_Exception);
    void     SetPipe( in double Xcentre, in double Ycentre, in double ZCentre,
                      in double Xaxis, in double Yaxis, in double Zaxis,
                      in double Rayon, in double Haut, in double Rayonint )
                                                           raises (SALOME::SALOME_Exception);
    void     SetSphere (in double Xcentre, in double Ycentre, in double Zcentre, in double rayon)
                                                           raises (SALOME::SALOME_Exception);

    double_array GetCoords()                               raises (SALOME::SALOME_Exception);

    void     SetLimit (in double Xincr, in double Yincr, in double Zincr)
                                                           raises (SALOME::SALOME_Exception);
    double_array GetLimit()                                raises (SALOME::SALOME_Exception);

// Liens avec les autres structures
    void     AddHypo(in string NomHypo)                    raises (SALOME::SALOME_Exception);
    listeHypo GetHypo()                                    raises (SALOME::SALOME_Exception);
    void     SupprHypo(in string NomHypo)                  raises (SALOME::SALOME_Exception);

  };
};
#endif
